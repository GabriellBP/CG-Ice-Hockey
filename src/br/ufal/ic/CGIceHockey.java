package br.ufal.ic;

import com.sun.opengl.util.Animator;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

public class CGIceHockey extends JFrame {

    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    
    private Animator animator;
    private final GLRenderer renderer;
    
    /** Creates new form MainFrame */
    public CGIceHockey() {
        initComponents();
        setTitle("Simple JOGL Application");

        bgrpAlgorithm.add(btnBresenham);
        bgrpAlgorithm.add(btnLineEq);
        
        renderer = new GLRenderer(canvas.getWidth(), canvas.getHeight());
        canvas.addGLEventListener(renderer);
        animator = new Animator(canvas);

        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());         
        
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    @Override
    public void setVisible(boolean show){
        System.out.println("setVisible " + show);
        if(!show)
            animator.stop();
        super.setVisible(show);
        if(!show)
            animator.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrpAlgorithm = new ButtonGroup();
        canvas = new GLCanvas();
        lblAlgorithm = new JLabel();
        btnBresenham = new JRadioButton();
        btnLineEq = new JRadioButton();
        jSeparator1 = new JSeparator();
        lblLineProperties = new JLabel();
        jSlider1 = new JSlider();
        jLabel1 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new Dimension(1000, 600));
        setMinimumSize(new Dimension(1000, 600));
        setName("GUI"); // NOI18N
        setPreferredSize(new Dimension(1000, 600));
        setResizable(false);

        canvas.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                canvasMouseClicked(evt);
            }
        });
        canvas.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                keyboardHandler(evt);
            }
        });

        lblAlgorithm.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        lblAlgorithm.setText("Algoritmo");

        btnBresenham.setSelected(true);
        btnBresenham.setText("Bresenham");

        btnLineEq.setText("Eq. da reta / circunferência");

        jSeparator1.setOrientation(SwingConstants.VERTICAL);
        jSeparator1.setToolTipText("");

        lblLineProperties.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        lblLineProperties.setText("Propriedades da reta");

        jLabel1.setBackground(new Color(0, 0, 0));
        jLabel1.setText(" ");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(canvas, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lblAlgorithm))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBresenham)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLineEq)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLineProperties)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSlider1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblLineProperties, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider1, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblAlgorithm)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnBresenham)
                                    .addComponent(btnLineEq))))))
                .addGap(2, 2, 2)
                .addComponent(canvas, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keyboardHandler(KeyEvent evt) {//GEN-FIRST:event_keyboardHandler
        System.out.println("key pressed: " + evt.getKeyChar());
        if (evt.getKeyChar() == ' '){
            renderer.onSpace();
        }
    }//GEN-LAST:event_keyboardHandler

    private void canvasMouseClicked(MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
        System.out.println("Clicou em: x = " + evt.getX() + ", y = " + evt.getY());
        
        renderer.onClick(evt.getX(), evt.getY());
    }//GEN-LAST:event_canvasMouseClicked

    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                CGIceHockey frame = new CGIceHockey();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup bgrpAlgorithm;
    private JRadioButton btnBresenham;
    private JRadioButton btnLineEq;
    private GLCanvas canvas;
    private JLabel jLabel1;
    private JSeparator jSeparator1;
    private JSlider jSlider1;
    private JLabel lblAlgorithm;
    private JLabel lblLineProperties;
    // End of variables declaration//GEN-END:variables

}
